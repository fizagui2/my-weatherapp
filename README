## Main project folder for frontend
The frontend folder contains all the files responsible for the visual and interactive elements of this project. It serves as the user interface where users can interact with the application.

## Features
- HTML: Defines the structure and layout of the web pages.
- CSS: Provides styling for the elements, ensuring the application has a visually appealing and responsive design.
- JavaScript: Implements interactivity and functionality, including API calls to the backend.

## Examples of Usage
- The index.html file is the main entry point of the web application and serves the user interface.
- The style.css file styles elements like buttons, inputs, and the overall layout of the page.
- The app.js file handles API calls to the backend and dynamically updates the UI based on user input or responses from the backend.



Maintain the file paths for images, styles, and scripts to ensure the application functions correctly.
Ensure consistency between the frontend and backend by keeping the API endpoint URLs up to date in the app.js file.


param (
    [string]$ComputerName = $(Read-Host "Enter computer name")
)

# Set the time filter - logs from the last 3 days
$startDate = (Get-Date).AddDays(-3)

# Check if the computer is reachable
if (Test-Connection -ComputerName $ComputerName -Count 1 -Quiet) {
    Write-Host "`n[$ComputerName] is reachable. Fetching logs since $startDate..." -ForegroundColor Green

    try {
        $events = Get-WinEvent -ComputerName $ComputerName -LogName System -ErrorAction Stop |
            Where-Object {
                $_.LevelDisplayName -in @("Critical", "Error") -and
                $_.TimeCreated -ge $startDate -and
                $_.Message -match "network|NIC|DNS|DHCP|TCP|IP|adapter"
            } |
            Select-Object TimeCreated, Id, LevelDisplayName, ProviderName, Message

        if ($events.Count -gt 0) {
            # Display to terminal with color coding
            foreach ($event in $events) {
                $level = $event.LevelDisplayName
                $color = if ($level -eq "Critical") { "Red" } else { "Yellow" }

                Write-Host "`n[$level] $($event.TimeCreated): $($event.ProviderName) - $($event.Message.Substring(0, [Math]::Min(80, $event.Message.Length)))..." -ForegroundColor $color
            }

            # Also show in a GUI table
            $events | Out-GridView -Title "Filtered Network Errors on $ComputerName (last 3 days)"
        } else {
            Write-Host "`nNo matching network-related errors found in the last 3 days." -ForegroundColor Cyan
        }
    }
    catch {
        Write-Host "`nFailed to retrieve logs from $ComputerName. Error: $_" -ForegroundColor Red
    }
}
else {
    Write-Host "`n[$ComputerName] is NOT reachable." -ForegroundColor Red
}
