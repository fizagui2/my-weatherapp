## Main project folder for frontend
The frontend folder contains all the files responsible for the visual and interactive elements of this project. It serves as the user interface where users can interact with the application.

## Features
- HTML: Defines the structure and layout of the web pages.
- CSS: Provides styling for the elements, ensuring the application has a visually appealing and responsive design.
- JavaScript: Implements interactivity and functionality, including API calls to the backend.

## Examples of Usage
- The index.html file is the main entry point of the web application and serves the user interface.
- The style.css file styles elements like buttons, inputs, and the overall layout of the page.
- The app.js file handles API calls to the backend and dynamically updates the UI based on user input or responses from the backend.



Maintain the file paths for images, styles, and scripts to ensure the application functions correctly.
Ensure consistency between the frontend and backend by keeping the API endpoint URLs up to date in the app.js file.


# ===========================================================
# ACT PC Troubleshooting Tool
# Retrieves System, Network, AD, Log, and Event Data
# Designed to continue running even if some parts fail
# ===========================================================

function Get-PCInfo {
    param ([string]$PCName)

    if (-not $PCName) {
        $PCName = Read-Host "Enter the PC name"
    }

    Write-Host "`nGathering system details for: $PCName`n" -ForegroundColor Cyan
    Write-Host "--------------------------------------------" -ForegroundColor White

    # ---------------- System Information ----------------
    try {
        Invoke-Command -ComputerName $PCName -ScriptBlock {
            $ComputerInfo = Get-ComputerInfo | Select-Object CsName, CsModel, BiosSerialNumber, OsName, OsArchitecture, WindowsVersion
            $IPAddressInfo = Get-NetIPAddress -AddressFamily IPv4 -PrefixOrigin Dhcp
            $TimeZone = Get-TimeZone
            $Uptime = (Get-CimInstance Win32_OperatingSystem).LastBootUpTime

            Write-Host "Computer Name: $($ComputerInfo.CsName)"
            Write-Host "Model: $($ComputerInfo.CsModel)"
            Write-Host "Serial Number: $($ComputerInfo.BiosSerialNumber)"
            Write-Host "OS: $($ComputerInfo.OsName) ($($ComputerInfo.OsArchitecture))"
            Write-Host "Windows Version: $($ComputerInfo.WindowsVersion)"
            Write-Host "IP Address: $($IPAddressInfo.IPAddress)"
            Write-Host "Time Zone: $($TimeZone.DisplayName)"
            Write-Host "Uptime Since: $Uptime"
        }
    } catch { Write-Host "⚠ Could not retrieve system details." -ForegroundColor Yellow }

    # ---------------- Active Directory Information ----------------
    Write-Host "`nChecking Active Directory..." -ForegroundColor Cyan
    try {
        $ADComputer = Get-ADComputer -Identity $PCName -Properties CanonicalName, Description
        Write-Host "AD Computer Name: $($ADComputer.Name)"
        Write-Host "AD Path: $($ADComputer.CanonicalName)"
        Write-Host "Description: $($ADComputer.Description)"
    } catch { Write-Host "⚠ Could not retrieve AD details." -ForegroundColor Yellow }

    # ---------------- Last Logged-In User ----------------
    Write-Host "`nFetching Last Logged-In User..." -ForegroundColor Cyan
    try {
        $LastUser = Get-WMIObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName
        Write-Host "Last User: $LastUser"
    } catch { Write-Host "⚠ Could not retrieve last user." -ForegroundColor Yellow }

    # ---------------- Logon History ----------------
    Write-Host "`nFetching Logon History..." -ForegroundColor Cyan
    try {
        Get-Content "\\actjdc02\COMMON\LOGON\computer\$PCName.log" | Select-Object -Last 10
    } catch { Write-Host "⚠ No logon history found." -ForegroundColor Yellow }

    # ---------------- Last Shutdown Time ----------------
    Write-Host "`nFetching Last Shutdown Time..." -ForegroundColor Cyan
    try {
        $LastShutdown = Get-WinEvent -ComputerName $PCName -FilterHashtable @{
            LogName = "System"
            ID = 1074
        } -MaxEvents 1 | Select-Object -ExpandProperty TimeCreated
        Write-Host "Last Shutdown: $LastShutdown"
    } catch { Write-Host "⚠ Could not retrieve shutdown time." -ForegroundColor Yellow }

    # ---------------- Recent System Errors ----------------
    Write-Host "`nFetching Recent System Errors..." -ForegroundColor Cyan
    try {
        $Errors = Get-WinEvent -ComputerName $PCName -FilterHashtable @{ LogName = "System"; Level = 2 } -MaxEvents 5
        if ($Errors) {
            Write-Host "Critical System Errors:"
            $Errors | ForEach-Object { Write-Host "$($_.TimeCreated) - $($_.Message)" -ForegroundColor Red }
        } else {
            Write-Host "✅ No recent system errors detected." -ForegroundColor Green
        }
    } catch { Write-Host "⚠ Could not retrieve system errors." -ForegroundColor Yellow }

    # ---------------- Recent Application Errors ----------------
    Write-Host "`nFetching Recent Application Errors..." -ForegroundColor Cyan
    try {
        $AppErrors = Get-WinEvent -ComputerName $PCName -FilterHashtable @{ LogName = "Application"; Level = 2 } -MaxEvents 5
        if ($AppErrors) {
            Write-Host "Critical Application Errors:"
            $AppErrors | ForEach-Object { Write-Host "$($_.TimeCreated) - $($_.Message)" -ForegroundColor Yellow }
        } else {
            Write-Host "✅ No recent application errors detected." -ForegroundColor Green
        }
    } catch { Write-Host "⚠ Could not retrieve application errors." -ForegroundColor Yellow }

    # ---------------- Pending Windows Updates ----------------
    Write-Host "`nChecking for Pending Windows Updates..." -ForegroundColor Cyan
    try {
        $Updates = Get-WindowsUpdate -ComputerName $PCName -ErrorAction SilentlyContinue
        if ($Updates) {
            Write-Host "Pending Updates:"
            $Updates | ForEach-Object { Write-Host "$($_.Title)" -ForegroundColor Yellow }
        } else {
            Write-Host "✅ No pending updates found." -ForegroundColor Green
        }
    } catch { Write-Host "⚠ Could not check for updates." -ForegroundColor Yellow }

    # ---------------- Disk Space Check ----------------
    Write-Host "`nChecking Disk Space..." -ForegroundColor Cyan
    try {
        $DiskInfo = Get-WmiObject -ComputerName $PCName -Class Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object FreeSpace, Size
        $FreeGB = [math]::Round($DiskInfo.FreeSpace / 1GB, 2)
        $TotalGB = [math]::Round($DiskInfo.Size / 1GB, 2)
        Write-Host "C: Drive Free Space: $FreeGB GB / $TotalGB GB"
    } catch { Write-Host "⚠ Could not retrieve disk space details." -ForegroundColor Yellow }

    # ---------------- Summary ----------------
    Write-Host "`n✅ Completed data retrieval for $PCName" -ForegroundColor Green
    Read-Host "Press any key to exit"
}

# ---------------- Main Function ----------------
function main {
    $host.ui.RawUI.WindowTitle = "ACT PC Troubleshooting Tool"
    Clear-Host

    Write-Host "==========================================="
    Write-Host "      ACT PC Troubleshooting Tool         "
    Write-Host "==========================================="

    $PCName = Read-Host "Enter PC name"
    Get-PCInfo -PCName $PCName
}

# Run the main function
main
