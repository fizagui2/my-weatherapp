## Main project folder for frontend
The frontend folder contains all the files responsible for the visual and interactive elements of this project. It serves as the user interface where users can interact with the application.

## Features
- HTML: Defines the structure and layout of the web pages.
- CSS: Provides styling for the elements, ensuring the application has a visually appealing and responsive design.
- JavaScript: Implements interactivity and functionality, including API calls to the backend.

## Examples of Usage
- The index.html file is the main entry point of the web application and serves the user interface.
- The style.css file styles elements like buttons, inputs, and the overall layout of the page.
- The app.js file handles API calls to the backend and dynamically updates the UI based on user input or responses from the backend.



Maintain the file paths for images, styles, and scripts to ensure the application functions correctly.
Ensure consistency between the frontend and backend by keeping the API endpoint URLs up to date in the app.js file.


# ===========================================================
# ACT PC Troubleshooting Tool - Enhanced Version
# Retrieves System, Network, AD, Log, Performance, and Event Data
# Designed to continue running even if some parts fail
# ===========================================================

function Get-PCInfo {
    param ([string]$PCName)

    if (-not $PCName) {
        $PCName = Read-Host "Enter the PC name"
    }

    Write-Host "`nGathering system details for: $PCName`n" -ForegroundColor Cyan
    Write-Host "--------------------------------------------" -ForegroundColor White

    # ---------------- System Information ----------------
    try {
        Invoke-Command -ComputerName $PCName -ScriptBlock {
            $ComputerInfo = Get-ComputerInfo | Select-Object CsName, CsModel, BiosSerialNumber, OsName, OsArchitecture, WindowsVersion
            $IPAddressInfo = Get-NetIPAddress -AddressFamily IPv4 -PrefixOrigin Dhcp
            $TimeZone = Get-TimeZone
            $Uptime = (Get-CimInstance Win32_OperatingSystem).LastBootUpTime

            Write-Host "Computer Name: $($ComputerInfo.CsName)"
            Write-Host "Model: $($ComputerInfo.CsModel)"
            Write-Host "Serial Number: $($ComputerInfo.BiosSerialNumber)"
            Write-Host "OS: $($ComputerInfo.OsName) ($($ComputerInfo.OsArchitecture))"
            Write-Host "Windows Version: $($ComputerInfo.WindowsVersion)"
            Write-Host "IP Address: $($IPAddressInfo.IPAddress)"
            Write-Host "Time Zone: $($TimeZone.DisplayName)"
            Write-Host "Uptime Since: $Uptime"
        }
    } catch { Write-Host "⚠ Could not retrieve system details." -ForegroundColor Yellow }

    # ---------------- Active Directory Information ----------------
    Write-Host "`nChecking Active Directory..." -ForegroundColor Cyan
    try {
        $ADComputer = Get-ADComputer -Identity $PCName -Properties CanonicalName, Description
        Write-Host "AD Computer Name: $($ADComputer.Name)"
        Write-Host "AD Path: $($ADComputer.CanonicalName)"
        Write-Host "Description: $($ADComputer.Description)"
    } catch { Write-Host "⚠ Could not retrieve AD details." -ForegroundColor Yellow }

    # ---------------- Test Internet Connectivity ----------------
    Write-Host "`nTesting Internet Connectivity..." -ForegroundColor Cyan
    try {
        $InternetTest = Test-NetConnection -ComputerName "8.8.8.8" -InformationLevel Quiet
        if ($InternetTest) {
            Write-Host "✅ Internet is working." -ForegroundColor Green
        } else {
            Write-Host "⚠ No internet connection detected." -ForegroundColor Red
        }
    } catch { Write-Host "⚠ Unable to test internet connection." -ForegroundColor Yellow }

    # ---------------- Check Latency (Ping Test) ----------------
    Write-Host "`nChecking Latency to Google DNS (8.8.8.8)..." -ForegroundColor Cyan
    try {
        $PingTest = Test-Connection -ComputerName "8.8.8.8" -Count 4
        $PingTest | ForEach-Object { Write-Host "$($_.Address) - Latency: $($_.ResponseTime) ms" }
    } catch { Write-Host "⚠ Could not complete latency test." -ForegroundColor Yellow }

    # ---------------- CPU & Memory Usage ----------------
    Write-Host "`nFetching CPU & Memory Usage..." -ForegroundColor Cyan
    try {
        $PerfInfo = Get-CimInstance Win32_OperatingSystem
        $TotalMemory = [math]::Round($PerfInfo.TotalVisibleMemorySize / 1MB, 2)
        $FreeMemory = [math]::Round($PerfInfo.FreePhysicalMemory / 1MB, 2)
        $CPUUsage = Get-WmiObject win32_processor | Measure-Object -Property LoadPercentage -Average | Select-Object -ExpandProperty Average

        Write-Host "CPU Usage: $CPUUsage%"
        Write-Host "Memory Usage: $($TotalMemory - $FreeMemory) MB / $TotalMemory MB"
    } catch { Write-Host "⚠ Could not retrieve performance metrics." -ForegroundColor Yellow }

    # ---------------- Check Pending Windows Updates ----------------
    Write-Host "`nChecking for Pending Windows Updates..." -ForegroundColor Cyan
    try {
        $Updates = Invoke-Command -ComputerName $PCName -ScriptBlock { Get-WmiObject -Query "Select * from Win32_QuickFixEngineering" }
        if ($Updates) {
            Write-Host "Pending Updates:"
            $Updates | ForEach-Object { Write-Host "$($_.HotFixID) - Installed: $($_.InstalledOn)" -ForegroundColor Yellow }
        } else {
            Write-Host "✅ No pending updates found." -ForegroundColor Green
        }
    } catch { Write-Host "⚠ Could not check for updates." -ForegroundColor Yellow }

    # ---------------- Check Disk Space ----------------
    Write-Host "`nChecking Disk Space..." -ForegroundColor Cyan
    try {
        $DiskInfo = Invoke-Command -ComputerName $PCName -ScriptBlock {
            Get-PSDrive -Name C | Select-Object Used, Free, UsedPercentage
        }
        Write-Host "C: Drive Free Space: $($DiskInfo.Free) GB / $($DiskInfo.Used + $DiskInfo.Free) GB"
    } catch { Write-Host "⚠ Could not retrieve disk space details." -ForegroundColor Yellow }

    # ---------------- Summary ----------------
    Write-Host "`n✅ Completed data retrieval for $PCName" -ForegroundColor Green
    Read-Host "Press any key to exit"
}

# ---------------- Main Function ----------------
function main {
    $host.ui.RawUI.WindowTitle = "ACT PC Troubleshooting Tool"
    Clear-Host

    Write-Host "==========================================="
    Write-Host "      ACT PC Troubleshooting Tool         "
    Write-Host "==========================================="

    $PCName = Read-Host "Enter PC name"
    Get-PCInfo -PCName $PCName
}

# Run the main function
main
